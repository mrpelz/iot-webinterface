error_log stderr info;

daemon off;
worker_processes auto;

events {}

http {
  access_log /dev/null;

  client_body_temp_path /dev/null;
  proxy_temp_path /dev/null;
  fastcgi_temp_path /dev/null;
  uwsgi_temp_path /dev/null;
  scgi_temp_path /dev/null;

  include mime.conf;

  default_type text/plain;
  charset utf-8;

  gzip            on;
  gzip_min_length 1000;
  gzip_proxied    expired no-cache no-store private auth;
  gzip_types      *;

  upstream modules {
    server [::]:9999;
  }

  upstream iot {
    server localhost:1337;
  }

  map $request_uri $request_pathname {
    '~^(?P<pathname>.*?)(\?.*)*$'  $pathname;
  }

  server {
    listen 1338 default_server;
    listen [::]:1338 default_server;

    include headers.conf;

    expires off;

    location ~ \.m?js$ {
      proxy_pass http://modules;
    }

    # serve empty path with main.html
    location = / {
      # if accept header is json, serve pre-cache-directory
      if ($http_accept = 'application/json') {
        return 200 '[{"name": "static","type": "directory"}]';
      }

      rewrite ^ /main.html break;
      root static;
    }

    location = /static/main.html {
      add_header Content-Type 'text/plain';
      root .;
    }

    location = /static/redirect.html {
      add_header Content-Type 'text/plain';
      root .;
    }

    # fall back to redirect to empty path
    location / {
      root .;
      try_files dist src static @redirect_home;
    }

    location /dist {
      root .;
      try_files $uri =404;
    }

    location /node_modules {
      root .;
      try_files $uri =404;
    }

    location /src {
      root .;
      try_files $uri =404;
    }

    location /static {
      root .;
      try_files $uri @autoindex;
    }

    location @autoindex {
      autoindex on;
      autoindex_format json;
      root .;
    }

    location @redirect_home {
      set $redirect_url '/#path="$request_pathname"';
      return 307 $redirect_url;
    }

    # proxy api stream-endpoint with websocket-specific proxy settings
    # disallow storage completely
    location = /api/stream {
      include headers.conf;
      proxy_http_version 1.1;
      proxy_pass http://iot/api/stream;
      proxy_set_header Connection 'Upgrade';
      proxy_set_header Host '$host';
      proxy_set_header Upgrade '$http_upgrade';
    }

    # proxy api
    location /api/ {
      proxy_pass http://iot/api/;
    }
  }
}
